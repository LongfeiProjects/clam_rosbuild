/* Auto-generated by genmsg_cpp for file /home/correlllab/ros/clam2/smart_arm_kinematics/srv/SmartArmIK.srv */
#ifndef SMART_ARM_KINEMATICS_SERVICE_SMARTARMIK_H
#define SMART_ARM_KINEMATICS_SERVICE_SMARTARMIK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/PointStamped.h"



namespace smart_arm_kinematics
{
template <class ContainerAllocator>
struct SmartArmIKRequest_ {
  typedef SmartArmIKRequest_<ContainerAllocator> Type;

  SmartArmIKRequest_()
  : goal()
  {
  }

  SmartArmIKRequest_(const ContainerAllocator& _alloc)
  : goal(_alloc)
  {
  }

  typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _goal_type;
   ::geometry_msgs::PointStamped_<ContainerAllocator>  goal;


private:
  static const char* __s_getDataType_() { return "smart_arm_kinematics/SmartArmIKRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "e88395c1654d49c84d945905e3bcde8e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "330a33b8e6f4e7b91d8e0afbea1b0223"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/PointStamped goal\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, goal);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, goal);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(goal);
    return size;
  }

  typedef boost::shared_ptr< ::smart_arm_kinematics::SmartArmIKRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smart_arm_kinematics::SmartArmIKRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SmartArmIKRequest
typedef  ::smart_arm_kinematics::SmartArmIKRequest_<std::allocator<void> > SmartArmIKRequest;

typedef boost::shared_ptr< ::smart_arm_kinematics::SmartArmIKRequest> SmartArmIKRequestPtr;
typedef boost::shared_ptr< ::smart_arm_kinematics::SmartArmIKRequest const> SmartArmIKRequestConstPtr;


template <class ContainerAllocator>
struct SmartArmIKResponse_ {
  typedef SmartArmIKResponse_<ContainerAllocator> Type;

  SmartArmIKResponse_()
  : success(false)
  , solutions()
  {
  }

  SmartArmIKResponse_(const ContainerAllocator& _alloc)
  : success(false)
  , solutions(_alloc)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _solutions_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  solutions;


  ROS_DEPRECATED uint32_t get_solutions_size() const { return (uint32_t)solutions.size(); }
  ROS_DEPRECATED void set_solutions_size(uint32_t size) { solutions.resize((size_t)size); }
  ROS_DEPRECATED void get_solutions_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->solutions; }
  ROS_DEPRECATED void set_solutions_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->solutions = vec; }
private:
  static const char* __s_getDataType_() { return "smart_arm_kinematics/SmartArmIKResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "e90a239b5662c9f8c0bdb849fb86244e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "330a33b8e6f4e7b91d8e0afbea1b0223"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool success\n\
float64[] solutions\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    ros::serialization::serialize(stream, solutions);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    ros::serialization::deserialize(stream, solutions);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    size += ros::serialization::serializationLength(solutions);
    return size;
  }

  typedef boost::shared_ptr< ::smart_arm_kinematics::SmartArmIKResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smart_arm_kinematics::SmartArmIKResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SmartArmIKResponse
typedef  ::smart_arm_kinematics::SmartArmIKResponse_<std::allocator<void> > SmartArmIKResponse;

typedef boost::shared_ptr< ::smart_arm_kinematics::SmartArmIKResponse> SmartArmIKResponsePtr;
typedef boost::shared_ptr< ::smart_arm_kinematics::SmartArmIKResponse const> SmartArmIKResponseConstPtr;

struct SmartArmIK
{

typedef SmartArmIKRequest Request;
typedef SmartArmIKResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SmartArmIK
} // namespace smart_arm_kinematics

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::smart_arm_kinematics::SmartArmIKRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::smart_arm_kinematics::SmartArmIKRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::smart_arm_kinematics::SmartArmIKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e88395c1654d49c84d945905e3bcde8e";
  }

  static const char* value(const  ::smart_arm_kinematics::SmartArmIKRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe88395c1654d49c8ULL;
  static const uint64_t static_value2 = 0x4d945905e3bcde8eULL;
};

template<class ContainerAllocator>
struct DataType< ::smart_arm_kinematics::SmartArmIKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "smart_arm_kinematics/SmartArmIKRequest";
  }

  static const char* value(const  ::smart_arm_kinematics::SmartArmIKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::smart_arm_kinematics::SmartArmIKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PointStamped goal\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::smart_arm_kinematics::SmartArmIKRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::smart_arm_kinematics::SmartArmIKResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::smart_arm_kinematics::SmartArmIKResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::smart_arm_kinematics::SmartArmIKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e90a239b5662c9f8c0bdb849fb86244e";
  }

  static const char* value(const  ::smart_arm_kinematics::SmartArmIKResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe90a239b5662c9f8ULL;
  static const uint64_t static_value2 = 0xc0bdb849fb86244eULL;
};

template<class ContainerAllocator>
struct DataType< ::smart_arm_kinematics::SmartArmIKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "smart_arm_kinematics/SmartArmIKResponse";
  }

  static const char* value(const  ::smart_arm_kinematics::SmartArmIKResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::smart_arm_kinematics::SmartArmIKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
float64[] solutions\n\
\n\
\n\
";
  }

  static const char* value(const  ::smart_arm_kinematics::SmartArmIKResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::smart_arm_kinematics::SmartArmIKRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.goal);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SmartArmIKRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::smart_arm_kinematics::SmartArmIKResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.solutions);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SmartArmIKResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<smart_arm_kinematics::SmartArmIK> {
  static const char* value() 
  {
    return "330a33b8e6f4e7b91d8e0afbea1b0223";
  }

  static const char* value(const smart_arm_kinematics::SmartArmIK&) { return value(); } 
};

template<>
struct DataType<smart_arm_kinematics::SmartArmIK> {
  static const char* value() 
  {
    return "smart_arm_kinematics/SmartArmIK";
  }

  static const char* value(const smart_arm_kinematics::SmartArmIK&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<smart_arm_kinematics::SmartArmIKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "330a33b8e6f4e7b91d8e0afbea1b0223";
  }

  static const char* value(const smart_arm_kinematics::SmartArmIKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<smart_arm_kinematics::SmartArmIKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "smart_arm_kinematics/SmartArmIK";
  }

  static const char* value(const smart_arm_kinematics::SmartArmIKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<smart_arm_kinematics::SmartArmIKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "330a33b8e6f4e7b91d8e0afbea1b0223";
  }

  static const char* value(const smart_arm_kinematics::SmartArmIKResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<smart_arm_kinematics::SmartArmIKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "smart_arm_kinematics/SmartArmIK";
  }

  static const char* value(const smart_arm_kinematics::SmartArmIKResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SMART_ARM_KINEMATICS_SERVICE_SMARTARMIK_H

