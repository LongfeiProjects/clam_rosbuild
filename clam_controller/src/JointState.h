/* Auto-generated by genmsg_cpp for file /home/share/ros/dynamixel_hardware_interface/msg/JointState.msg */
#ifndef DYNAMIXEL_HARDWARE_INTERFACE_MESSAGE_JOINTSTATE_H
#define DYNAMIXEL_HARDWARE_INTERFACE_MESSAGE_JOINTSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace dynamixel_hardware_interface
{
template <class ContainerAllocator>
struct JointState_ {
  typedef JointState_<ContainerAllocator> Type;

  JointState_()
  : header()
  , name()
  , target_position(0.0)
  , target_velocity(0.0)
  , position(0.0)
  , velocity(0.0)
  , load(0.0)
  , moving(false)
  {
  }

  JointState_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , name(_alloc)
  , target_position(0.0)
  , target_velocity(0.0)
  , position(0.0)
  , velocity(0.0)
  , load(0.0)
  , moving(false)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef double _target_position_type;
  double target_position;

  typedef double _target_velocity_type;
  double target_velocity;

  typedef double _position_type;
  double position;

  typedef double _velocity_type;
  double velocity;

  typedef double _load_type;
  double load;

  typedef uint8_t _moving_type;
  uint8_t moving;


private:
  static const char* __s_getDataType_() { return "dynamixel_hardware_interface/JointState"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0fab1cf305c2bcc21c2d79dd7bcae0a9"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
string name             # joint name\n\
float64 target_position # commanded position (in radians)\n\
float64 target_velocity # commanded position (in radians per second)\n\
float64 position        # current joint position (in radians)\n\
float64 velocity        # current joint speed (in radians per second)\n\
float64 load            # current load\n\
bool    moving          # is joint currently in motion\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, name);
    ros::serialization::serialize(stream, target_position);
    ros::serialization::serialize(stream, target_velocity);
    ros::serialization::serialize(stream, position);
    ros::serialization::serialize(stream, velocity);
    ros::serialization::serialize(stream, load);
    ros::serialization::serialize(stream, moving);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, name);
    ros::serialization::deserialize(stream, target_position);
    ros::serialization::deserialize(stream, target_velocity);
    ros::serialization::deserialize(stream, position);
    ros::serialization::deserialize(stream, velocity);
    ros::serialization::deserialize(stream, load);
    ros::serialization::deserialize(stream, moving);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(name);
    size += ros::serialization::serializationLength(target_position);
    size += ros::serialization::serializationLength(target_velocity);
    size += ros::serialization::serializationLength(position);
    size += ros::serialization::serializationLength(velocity);
    size += ros::serialization::serializationLength(load);
    size += ros::serialization::serializationLength(moving);
    return size;
  }

  typedef boost::shared_ptr< ::dynamixel_hardware_interface::JointState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_hardware_interface::JointState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct JointState
typedef  ::dynamixel_hardware_interface::JointState_<std::allocator<void> > JointState;

typedef boost::shared_ptr< ::dynamixel_hardware_interface::JointState> JointStatePtr;
typedef boost::shared_ptr< ::dynamixel_hardware_interface::JointState const> JointStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::dynamixel_hardware_interface::JointState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::dynamixel_hardware_interface::JointState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace dynamixel_hardware_interface

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamixel_hardware_interface::JointState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamixel_hardware_interface::JointState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_hardware_interface::JointState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0fab1cf305c2bcc21c2d79dd7bcae0a9";
  }

  static const char* value(const  ::dynamixel_hardware_interface::JointState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0fab1cf305c2bcc2ULL;
  static const uint64_t static_value2 = 0x1c2d79dd7bcae0a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_hardware_interface::JointState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamixel_hardware_interface/JointState";
  }

  static const char* value(const  ::dynamixel_hardware_interface::JointState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_hardware_interface::JointState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
string name             # joint name\n\
float64 target_position # commanded position (in radians)\n\
float64 target_velocity # commanded position (in radians per second)\n\
float64 position        # current joint position (in radians)\n\
float64 velocity        # current joint speed (in radians per second)\n\
float64 load            # current load\n\
bool    moving          # is joint currently in motion\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::dynamixel_hardware_interface::JointState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::dynamixel_hardware_interface::JointState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::dynamixel_hardware_interface::JointState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamixel_hardware_interface::JointState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.name);
    stream.next(m.target_position);
    stream.next(m.target_velocity);
    stream.next(m.position);
    stream.next(m.velocity);
    stream.next(m.load);
    stream.next(m.moving);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JointState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_hardware_interface::JointState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::dynamixel_hardware_interface::JointState_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "target_position: ";
    Printer<double>::stream(s, indent + "  ", v.target_position);
    s << indent << "target_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.target_velocity);
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "load: ";
    Printer<double>::stream(s, indent + "  ", v.load);
    s << indent << "moving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_HARDWARE_INTERFACE_MESSAGE_JOINTSTATE_H

