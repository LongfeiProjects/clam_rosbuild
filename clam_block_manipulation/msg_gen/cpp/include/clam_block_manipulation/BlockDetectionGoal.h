/* Auto-generated by genmsg_cpp for file /home/dave/ros/clam/clam_block_manipulation/msg/BlockDetectionGoal.msg */
#ifndef CLAM_BLOCK_MANIPULATION_MESSAGE_BLOCKDETECTIONGOAL_H
#define CLAM_BLOCK_MANIPULATION_MESSAGE_BLOCKDETECTIONGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace clam_block_manipulation
{
template <class ContainerAllocator>
struct BlockDetectionGoal_ {
  typedef BlockDetectionGoal_<ContainerAllocator> Type;

  BlockDetectionGoal_()
  : frame()
  , table_height(0.0)
  , block_size(0.0)
  {
  }

  BlockDetectionGoal_(const ContainerAllocator& _alloc)
  : frame(_alloc)
  , table_height(0.0)
  , block_size(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  frame;

  typedef float _table_height_type;
  float table_height;

  typedef float _block_size_type;
  float block_size;


  typedef boost::shared_ptr< ::clam_block_manipulation::BlockDetectionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clam_block_manipulation::BlockDetectionGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BlockDetectionGoal
typedef  ::clam_block_manipulation::BlockDetectionGoal_<std::allocator<void> > BlockDetectionGoal;

typedef boost::shared_ptr< ::clam_block_manipulation::BlockDetectionGoal> BlockDetectionGoalPtr;
typedef boost::shared_ptr< ::clam_block_manipulation::BlockDetectionGoal const> BlockDetectionGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::clam_block_manipulation::BlockDetectionGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::clam_block_manipulation::BlockDetectionGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace clam_block_manipulation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::clam_block_manipulation::BlockDetectionGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::clam_block_manipulation::BlockDetectionGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::clam_block_manipulation::BlockDetectionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "55e74460cfe309311425690ecb457a45";
  }

  static const char* value(const  ::clam_block_manipulation::BlockDetectionGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x55e74460cfe30931ULL;
  static const uint64_t static_value2 = 0x1425690ecb457a45ULL;
};

template<class ContainerAllocator>
struct DataType< ::clam_block_manipulation::BlockDetectionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "clam_block_manipulation/BlockDetectionGoal";
  }

  static const char* value(const  ::clam_block_manipulation::BlockDetectionGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::clam_block_manipulation::BlockDetectionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
string frame\n\
float32 table_height\n\
float32 block_size\n\
\n\
";
  }

  static const char* value(const  ::clam_block_manipulation::BlockDetectionGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::clam_block_manipulation::BlockDetectionGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.frame);
    stream.next(m.table_height);
    stream.next(m.block_size);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BlockDetectionGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clam_block_manipulation::BlockDetectionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::clam_block_manipulation::BlockDetectionGoal_<ContainerAllocator> & v) 
  {
    s << indent << "frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame);
    s << indent << "table_height: ";
    Printer<float>::stream(s, indent + "  ", v.table_height);
    s << indent << "block_size: ";
    Printer<float>::stream(s, indent + "  ", v.block_size);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CLAM_BLOCK_MANIPULATION_MESSAGE_BLOCKDETECTIONGOAL_H

