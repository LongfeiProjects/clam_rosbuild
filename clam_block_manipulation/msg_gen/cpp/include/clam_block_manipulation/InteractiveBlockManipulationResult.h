/* Auto-generated by genmsg_cpp for file /home/dave/ros/clam/clam_block_manipulation/msg/InteractiveBlockManipulationResult.msg */
#ifndef CLAM_BLOCK_MANIPULATION_MESSAGE_INTERACTIVEBLOCKMANIPULATIONRESULT_H
#define CLAM_BLOCK_MANIPULATION_MESSAGE_INTERACTIVEBLOCKMANIPULATIONRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Pose.h"
#include "geometry_msgs/Pose.h"

namespace clam_block_manipulation
{
template <class ContainerAllocator>
struct InteractiveBlockManipulationResult_ {
  typedef InteractiveBlockManipulationResult_<ContainerAllocator> Type;

  InteractiveBlockManipulationResult_()
  : pickup_pose()
  , place_pose()
  {
  }

  InteractiveBlockManipulationResult_(const ContainerAllocator& _alloc)
  : pickup_pose(_alloc)
  , place_pose(_alloc)
  {
  }

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pickup_pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pickup_pose;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _place_pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  place_pose;


  typedef boost::shared_ptr< ::clam_block_manipulation::InteractiveBlockManipulationResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clam_block_manipulation::InteractiveBlockManipulationResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct InteractiveBlockManipulationResult
typedef  ::clam_block_manipulation::InteractiveBlockManipulationResult_<std::allocator<void> > InteractiveBlockManipulationResult;

typedef boost::shared_ptr< ::clam_block_manipulation::InteractiveBlockManipulationResult> InteractiveBlockManipulationResultPtr;
typedef boost::shared_ptr< ::clam_block_manipulation::InteractiveBlockManipulationResult const> InteractiveBlockManipulationResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::clam_block_manipulation::InteractiveBlockManipulationResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::clam_block_manipulation::InteractiveBlockManipulationResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace clam_block_manipulation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::clam_block_manipulation::InteractiveBlockManipulationResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::clam_block_manipulation::InteractiveBlockManipulationResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::clam_block_manipulation::InteractiveBlockManipulationResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3fec3f60e60c18ca7b67a7513b211e95";
  }

  static const char* value(const  ::clam_block_manipulation::InteractiveBlockManipulationResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3fec3f60e60c18caULL;
  static const uint64_t static_value2 = 0x7b67a7513b211e95ULL;
};

template<class ContainerAllocator>
struct DataType< ::clam_block_manipulation::InteractiveBlockManipulationResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "clam_block_manipulation/InteractiveBlockManipulationResult";
  }

  static const char* value(const  ::clam_block_manipulation::InteractiveBlockManipulationResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::clam_block_manipulation::InteractiveBlockManipulationResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#result definition\n\
geometry_msgs/Pose pickup_pose\n\
geometry_msgs/Pose place_pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::clam_block_manipulation::InteractiveBlockManipulationResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::clam_block_manipulation::InteractiveBlockManipulationResult_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::clam_block_manipulation::InteractiveBlockManipulationResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pickup_pose);
    stream.next(m.place_pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct InteractiveBlockManipulationResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clam_block_manipulation::InteractiveBlockManipulationResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::clam_block_manipulation::InteractiveBlockManipulationResult_<ContainerAllocator> & v) 
  {
    s << indent << "pickup_pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pickup_pose);
    s << indent << "place_pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.place_pose);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CLAM_BLOCK_MANIPULATION_MESSAGE_INTERACTIVEBLOCKMANIPULATIONRESULT_H

