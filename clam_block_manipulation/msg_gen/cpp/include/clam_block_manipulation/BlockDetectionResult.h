/* Auto-generated by genmsg_cpp for file /home/dave/ros/clam/clam_block_manipulation/msg/BlockDetectionResult.msg */
#ifndef CLAM_BLOCK_MANIPULATION_MESSAGE_BLOCKDETECTIONRESULT_H
#define CLAM_BLOCK_MANIPULATION_MESSAGE_BLOCKDETECTIONRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/PoseArray.h"

namespace clam_block_manipulation
{
template <class ContainerAllocator>
struct BlockDetectionResult_ {
  typedef BlockDetectionResult_<ContainerAllocator> Type;

  BlockDetectionResult_()
  : blocks()
  {
  }

  BlockDetectionResult_(const ContainerAllocator& _alloc)
  : blocks(_alloc)
  {
  }

  typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _blocks_type;
   ::geometry_msgs::PoseArray_<ContainerAllocator>  blocks;


  typedef boost::shared_ptr< ::clam_block_manipulation::BlockDetectionResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clam_block_manipulation::BlockDetectionResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BlockDetectionResult
typedef  ::clam_block_manipulation::BlockDetectionResult_<std::allocator<void> > BlockDetectionResult;

typedef boost::shared_ptr< ::clam_block_manipulation::BlockDetectionResult> BlockDetectionResultPtr;
typedef boost::shared_ptr< ::clam_block_manipulation::BlockDetectionResult const> BlockDetectionResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::clam_block_manipulation::BlockDetectionResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::clam_block_manipulation::BlockDetectionResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace clam_block_manipulation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::clam_block_manipulation::BlockDetectionResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::clam_block_manipulation::BlockDetectionResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::clam_block_manipulation::BlockDetectionResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fe4272fcc0cf26cf952b16d66c620bd4";
  }

  static const char* value(const  ::clam_block_manipulation::BlockDetectionResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfe4272fcc0cf26cfULL;
  static const uint64_t static_value2 = 0x952b16d66c620bd4ULL;
};

template<class ContainerAllocator>
struct DataType< ::clam_block_manipulation::BlockDetectionResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "clam_block_manipulation/BlockDetectionResult";
  }

  static const char* value(const  ::clam_block_manipulation::BlockDetectionResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::clam_block_manipulation::BlockDetectionResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#result definition\n\
geometry_msgs/PoseArray blocks\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseArray\n\
# An array of poses with a header for global reference.\n\
\n\
Header header\n\
\n\
Pose[] poses\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::clam_block_manipulation::BlockDetectionResult_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::clam_block_manipulation::BlockDetectionResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.blocks);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BlockDetectionResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clam_block_manipulation::BlockDetectionResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::clam_block_manipulation::BlockDetectionResult_<ContainerAllocator> & v) 
  {
    s << indent << "blocks: ";
s << std::endl;
    Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "  ", v.blocks);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CLAM_BLOCK_MANIPULATION_MESSAGE_BLOCKDETECTIONRESULT_H

